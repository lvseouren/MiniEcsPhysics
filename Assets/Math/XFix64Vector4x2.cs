//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using Unity.Mathematics;
using static Unity.Mathematics.math;

#pragma warning disable 0660, 0661

namespace XFixMath.NET
{
    [System.Serializable]
    public partial struct XFix64Vector4x2 : System.IEquatable<XFix64Vector4x2>, IFormattable
    {
        public XFix64Vector4 c0;
        public XFix64Vector4 c1;

        /// <summary>XFix64Vector4x2 zero value.</summary>
        public static readonly XFix64Vector4x2 zero;

        /// <summary>Constructs a XFix64Vector4x2 matrix from two XFix64Vector4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(XFix64Vector4 c0, XFix64Vector4 c1)
        {
            this.c0 = c0;
            this.c1 = c1;
        }

        /// <summary>Constructs a XFix64Vector4x2 matrix from 8 XFix64 values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(XFix64 m00, XFix64 m01,
                     XFix64 m10, XFix64 m11,
                     XFix64 m20, XFix64 m21,
                     XFix64 m30, XFix64 m31)
        {
            this.c0 = new XFix64Vector4(m00, m10, m20, m30);
            this.c1 = new XFix64Vector4(m01, m11, m21, m31);
        }

        /// <summary>Constructs a XFix64Vector4x2 matrix from a single XFix64 value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(XFix64 v)
        {
            this.c0 = v;
            this.c1 = v;
        }

        /// <summary>Constructs a XFix64Vector4x2 matrix from a single int value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(int v)
        {
            this.c0 = (XFix64Vector4)v;
            this.c1 = (XFix64Vector4)v;
        }

        /// <summary>Constructs a XFix64Vector4x2 matrix from a int4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(int4x2 v)
        {
            this.c0 = (XFix64Vector4)v.c0;
            this.c1 = (XFix64Vector4)v.c1;
        }

        /// <summary>Constructs a XFix64Vector4x2 matrix from a single uint value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(uint v)
        {
            this.c0 = (XFix64Vector4)v;
            this.c1 = (XFix64Vector4)v;
        }

        /// <summary>Constructs a XFix64Vector4x2 matrix from a uint4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector4x2(uint4x2 v)
        {
            this.c0 = (XFix64Vector4)v.c0;
            this.c1 = (XFix64Vector4)v.c1;
        }


        /// <summary>Implicitly converts a single XFix64 value to a XFix64Vector4x2 matrix by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator XFix64Vector4x2(XFix64 v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Explicitly converts a single int value to a XFix64Vector4x2 matrix by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector4x2(int v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Explicitly converts a int4x2 matrix to a XFix64Vector4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector4x2(int4x2 v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Explicitly converts a single uint value to a XFix64Vector4x2 matrix by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector4x2(uint v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Explicitly converts a uint4x2 matrix to a XFix64Vector4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector4x2(uint4x2 v)
        {
            return new XFix64Vector4x2(v);
        }


        /// <summary>Returns the result of a componentwise multiplication operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator *(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1);
        }

        /// <summary>Returns the result of a componentwise multiplication operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator *(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 * rhs, lhs.c1 * rhs);
        }

        /// <summary>Returns the result of a componentwise multiplication operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator *(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs * rhs.c0, lhs * rhs.c1);
        }


        /// <summary>Returns the result of a componentwise addition operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator +(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1);
        }

        /// <summary>Returns the result of a componentwise addition operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator +(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 + rhs, lhs.c1 + rhs);
        }

        /// <summary>Returns the result of a componentwise addition operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator +(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs + rhs.c0, lhs + rhs.c1);
        }


        /// <summary>Returns the result of a componentwise subtraction operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator -(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1);
        }

        /// <summary>Returns the result of a componentwise subtraction operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator -(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 - rhs, lhs.c1 - rhs);
        }

        /// <summary>Returns the result of a componentwise subtraction operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator -(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs - rhs.c0, lhs - rhs.c1);
        }


        /// <summary>Returns the result of a componentwise division operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator /(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1);
        }

        /// <summary>Returns the result of a componentwise division operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator /(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 / rhs, lhs.c1 / rhs);
        }

        /// <summary>Returns the result of a componentwise division operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator /(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs / rhs.c0, lhs / rhs.c1);
        }


        /// <summary>Returns the result of a componentwise modulus operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator %(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1);
        }

        /// <summary>Returns the result of a componentwise modulus operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator %(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new XFix64Vector4x2(lhs.c0 % rhs, lhs.c1 % rhs);
        }

        /// <summary>Returns the result of a componentwise modulus operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator %(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new XFix64Vector4x2(lhs % rhs.c0, lhs % rhs.c1);
        }


        /// <summary>Returns the result of a componentwise increment operation on a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator ++(XFix64Vector4x2 val)
        {
            return new XFix64Vector4x2(++val.c0, ++val.c1);
        }


        /// <summary>Returns the result of a componentwise decrement operation on a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator --(XFix64Vector4x2 val)
        {
            return new XFix64Vector4x2(--val.c0, --val.c1);
        }


        /// <summary>Returns the result of a componentwise less than operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1);
        }

        /// <summary>Returns the result of a componentwise less than operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new bool4x2(lhs.c0 < rhs, lhs.c1 < rhs);
        }

        /// <summary>Returns the result of a componentwise less than operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs < rhs.c0, lhs < rhs.c1);
        }


        /// <summary>Returns the result of a componentwise less or equal operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <=(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1);
        }

        /// <summary>Returns the result of a componentwise less or equal operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <=(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new bool4x2(lhs.c0 <= rhs, lhs.c1 <= rhs);
        }

        /// <summary>Returns the result of a componentwise less or equal operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <=(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs <= rhs.c0, lhs <= rhs.c1);
        }


        /// <summary>Returns the result of a componentwise greater than operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1);
        }

        /// <summary>Returns the result of a componentwise greater than operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new bool4x2(lhs.c0 > rhs, lhs.c1 > rhs);
        }

        /// <summary>Returns the result of a componentwise greater than operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs > rhs.c0, lhs > rhs.c1);
        }


        /// <summary>Returns the result of a componentwise greater or equal operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >=(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1);
        }

        /// <summary>Returns the result of a componentwise greater or equal operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >=(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new bool4x2(lhs.c0 >= rhs, lhs.c1 >= rhs);
        }

        /// <summary>Returns the result of a componentwise greater or equal operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >=(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs >= rhs.c0, lhs >= rhs.c1);
        }


        /// <summary>Returns the result of a componentwise unary minus operation on a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator -(XFix64Vector4x2 val)
        {
            return new XFix64Vector4x2(-val.c0, -val.c1);
        }


        /// <summary>Returns the result of a componentwise unary plus operation on a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 operator +(XFix64Vector4x2 val)
        {
            return new XFix64Vector4x2(+val.c0, +val.c1);
        }


        /// <summary>Returns the result of a componentwise equality operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator ==(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1);
        }

        /// <summary>Returns the result of a componentwise equality operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator ==(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new bool4x2(lhs.c0 == rhs, lhs.c1 == rhs);
        }

        /// <summary>Returns the result of a componentwise equality operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator ==(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs == rhs.c0, lhs == rhs.c1);
        }


        /// <summary>Returns the result of a componentwise not equal operation on two XFix64Vector4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator !=(XFix64Vector4x2 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1);
        }

        /// <summary>Returns the result of a componentwise not equal operation on a XFix64Vector4x2 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator !=(XFix64Vector4x2 lhs, XFix64 rhs)
        {
            return new bool4x2(lhs.c0 != rhs, lhs.c1 != rhs);
        }

        /// <summary>Returns the result of a componentwise not equal operation on a XFix64 value and a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator !=(XFix64 lhs, XFix64Vector4x2 rhs)
        {
            return new bool4x2(lhs != rhs.c0, lhs != rhs.c1);
        }



        /// <summary>Returns the XFix64Vector4 element at a specified index.</summary>
        unsafe public ref XFix64Vector4 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (XFix64Vector4x2* array = &this)
                {
                    return ref ((XFix64Vector4*)array)[index];
                }
            }
        }

        /// <summary>Returns true if the XFix64Vector4x2 is equal to a given XFix64Vector4x2, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(XFix64Vector4x2 rhs)
        {
            return c0.Equals(rhs.c0) && c1.Equals(rhs.c1);
        }

        /// <summary>Returns true if the XFix64Vector4x2 is equal to a given XFix64Vector4x2, false otherwise.</summary>
        public override bool Equals(object o)
        {
            return Equals((XFix64Vector4x2)o);
        }


        /// <summary>Returns a hash code for the XFix64Vector4x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            return (int)fpmath.hash(this);
        }


        /// <summary>Returns a string representation of the XFix64Vector4x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("XFix64Vector4x2({0}, {1},  {2}, {3},  {4}, {5},  {6}, {7})", c0.x, c1.x, c0.y, c1.y, c0.z, c1.z, c0.w, c1.w);
        }

        /// <summary>Returns a string representation of the XFix64Vector4x2 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("XFix64Vector4x2({0}, {1},  {2}, {3},  {4}, {5},  {6}, {7})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c0.z.ToString(format, formatProvider), c1.z.ToString(format, formatProvider), c0.w.ToString(format, formatProvider), c1.w.ToString(format, formatProvider));
        }

    }

    public static partial class fpmath
    {
        /// <summary>Returns a XFix64Vector4x2 matrix constructed from two XFix64Vector4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(XFix64Vector4 c0, XFix64Vector4 c1)
        {
            return new XFix64Vector4x2(c0, c1);
        }

        /// <summary>Returns a XFix64Vector4x2 matrix constructed from from 8 XFix64 values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(XFix64 m00, XFix64 m01,
                                  XFix64 m10, XFix64 m11,
                                  XFix64 m20, XFix64 m21,
                                  XFix64 m30, XFix64 m31)
        {
            return new XFix64Vector4x2(m00, m01,
                             m10, m11,
                             m20, m21,
                             m30, m31);
        }

        /// <summary>Returns a XFix64Vector4x2 matrix constructed from a single XFix64 value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(XFix64 v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Returns a XFix64Vector4x2 matrix constructed from a single int value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(int v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Return a XFix64Vector4x2 matrix constructed from a int4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(int4x2 v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Returns a XFix64Vector4x2 matrix constructed from a single uint value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(uint v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Return a XFix64Vector4x2 matrix constructed from a uint4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 XFix64Vector4x2(uint4x2 v)
        {
            return new XFix64Vector4x2(v);
        }

        /// <summary>Return the XFix64Vector2x4 transpose of a XFix64Vector4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 transpose(XFix64Vector4x2 v)
        {
            return XFix64Vector2x4(
                v.c0.x, v.c0.y, v.c0.z, v.c0.w,
                v.c1.x, v.c1.y, v.c1.z, v.c1.w);
        }

        /// <summary>Returns a uint hash code of a XFix64Vector4x2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(XFix64Vector4x2 v)
        {
            return math.csum(MathXFix64.asuint(v.c0) * uint4(0xE121E6ADu, 0xC9CA1249u, 0x69B60C81u, 0xE0EB6C25u) +
                        MathXFix64.asuint(v.c1) * uint4(0xF648BEABu, 0x6BDB2B07u, 0xEF63C699u, 0x9001903Fu)) + 0xA895B9CDu;
        }

        /// <summary>
        /// Returns a uint4 vector hash code of a XFix64Vector4x2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint4 hashwide(XFix64Vector4x2 v)
        {
            return (MathXFix64.asuint(v.c0) * uint4(0x9D23B201u, 0x4B01D3E1u, 0x7461CA0Du, 0x79725379u) +
                    MathXFix64.asuint(v.c1) * uint4(0xD6258E5Bu, 0xEE390C97u, 0x9C8A2F05u, 0x4DDC6509u)) + 0x7CF083CBu;
        }

    }
}
