//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using Unity.Mathematics;
using static Unity.Mathematics.math;

#pragma warning disable 0660, 0661

namespace XFixMath.NET
{
    [System.Serializable]
    public partial struct XFix64Vector2x4 : System.IEquatable<XFix64Vector2x4>, IFormattable
    {
        public XFix64Vector2 c0;
        public XFix64Vector2 c1;
        public XFix64Vector2 c2;
        public XFix64Vector2 c3;

        /// <summary>XFix64Vector2x4 zero value.</summary>
        public static readonly XFix64Vector2x4 zero;

        /// <summary>Constructs a XFix64Vector2x4 matrix from four XFix64Vector2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(XFix64Vector2 c0, XFix64Vector2 c1, XFix64Vector2 c2, XFix64Vector2 c3)
        {
            this.c0 = c0;
            this.c1 = c1;
            this.c2 = c2;
            this.c3 = c3;
        }

        /// <summary>Constructs a XFix64Vector2x4 matrix from 8 XFix64 values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(XFix64 m00, XFix64 m01, XFix64 m02, XFix64 m03,
                     XFix64 m10, XFix64 m11, XFix64 m12, XFix64 m13)
        {
            this.c0 = new XFix64Vector2(m00, m10);
            this.c1 = new XFix64Vector2(m01, m11);
            this.c2 = new XFix64Vector2(m02, m12);
            this.c3 = new XFix64Vector2(m03, m13);
        }

        /// <summary>Constructs a XFix64Vector2x4 matrix from a single XFix64 value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(XFix64 v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
            this.c3 = v;
        }

        /// <summary>Constructs a XFix64Vector2x4 matrix from a single int value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(int v)
        {
            this.c0 = (XFix64Vector2)(XFix64)v;
            this.c1 = (XFix64Vector2)(XFix64)v;
            this.c2 = (XFix64Vector2)(XFix64)v;
            this.c3 = (XFix64Vector2)(XFix64)v;
        }

        /// <summary>Constructs a XFix64Vector2x4 matrix from a int2x4 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(int2x4 v)
        {
            this.c0 = (XFix64Vector2)v.c0;
            this.c1 = (XFix64Vector2)v.c1;
            this.c2 = (XFix64Vector2)v.c2;
            this.c3 = (XFix64Vector2)v.c3;
        }

        /// <summary>Constructs a XFix64Vector2x4 matrix from a single uint value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(uint v)
        {
            this.c0 = (XFix64Vector2)(XFix64)v;     
            this.c1 = (XFix64Vector2)(XFix64)v;
            this.c2 = (XFix64Vector2)(XFix64)v;
            this.c3 = (XFix64Vector2)(XFix64)v;
        }

        /// <summary>Constructs a XFix64Vector2x4 matrix from a uint2x4 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public XFix64Vector2x4(uint2x4 v)
        {
            this.c0 = (XFix64Vector2)v.c0;
            this.c1 = (XFix64Vector2)v.c1;
            this.c2 = (XFix64Vector2)v.c2;
            this.c3 = (XFix64Vector2)v.c3;
        }


        /// <summary>Implicitly converts a single XFix64 value to a XFix64Vector2x4 matrix by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator XFix64Vector2x4(XFix64 v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Explicitly converts a single int value to a XFix64Vector2x4 matrix by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector2x4(int v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Explicitly converts a int2x4 matrix to a XFix64Vector2x4 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector2x4(int2x4 v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Explicitly converts a single uint value to a XFix64Vector2x4 matrix by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector2x4(uint v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Explicitly converts a uint2x4 matrix to a XFix64Vector2x4 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator XFix64Vector2x4(uint2x4 v)
        {
            return new XFix64Vector2x4(v);
        }


        /// <summary>Returns the result of a componentwise multiplication operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator *(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2, lhs.c3 * rhs.c3);
        }

        /// <summary>Returns the result of a componentwise multiplication operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator *(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs, lhs.c3 * rhs);
        }

        /// <summary>Returns the result of a componentwise multiplication operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator *(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2, lhs * rhs.c3);
        }


        /// <summary>Returns the result of a componentwise addition operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator +(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3);
        }

        /// <summary>Returns the result of a componentwise addition operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator +(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs);
        }

        /// <summary>Returns the result of a componentwise addition operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator +(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3);
        }


        /// <summary>Returns the result of a componentwise subtraction operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator -(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3);
        }

        /// <summary>Returns the result of a componentwise subtraction operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator -(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs);
        }

        /// <summary>Returns the result of a componentwise subtraction operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator -(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3);
        }


        /// <summary>Returns the result of a componentwise division operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator /(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3);
        }

        /// <summary>Returns the result of a componentwise division operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator /(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs);
        }

        /// <summary>Returns the result of a componentwise division operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator /(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3);
        }


        /// <summary>Returns the result of a componentwise modulus operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator %(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3);
        }

        /// <summary>Returns the result of a componentwise modulus operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator %(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new XFix64Vector2x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs);
        }

        /// <summary>Returns the result of a componentwise modulus operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator %(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new XFix64Vector2x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3);
        }


        /// <summary>Returns the result of a componentwise increment operation on a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator ++(XFix64Vector2x4 val)
        {
            return new XFix64Vector2x4(++val.c0, ++val.c1, ++val.c2, ++val.c3);
        }


        /// <summary>Returns the result of a componentwise decrement operation on a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator --(XFix64Vector2x4 val)
        {
            return new XFix64Vector2x4(--val.c0, --val.c1, --val.c2, --val.c3);
        }


        /// <summary>Returns the result of a componentwise less than operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator <(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3);
        }

        /// <summary>Returns the result of a componentwise less than operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator <(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new bool2x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs);
        }

        /// <summary>Returns the result of a componentwise less than operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator <(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3);
        }


        /// <summary>Returns the result of a componentwise less or equal operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator <=(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3);
        }

        /// <summary>Returns the result of a componentwise less or equal operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator <=(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new bool2x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs);
        }

        /// <summary>Returns the result of a componentwise less or equal operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator <=(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3);
        }


        /// <summary>Returns the result of a componentwise greater than operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator >(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3);
        }

        /// <summary>Returns the result of a componentwise greater than operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator >(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new bool2x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs);
        }

        /// <summary>Returns the result of a componentwise greater than operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator >(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3);
        }


        /// <summary>Returns the result of a componentwise greater or equal operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator >=(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3);
        }

        /// <summary>Returns the result of a componentwise greater or equal operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator >=(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new bool2x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs);
        }

        /// <summary>Returns the result of a componentwise greater or equal operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator >=(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3);
        }


        /// <summary>Returns the result of a componentwise unary minus operation on a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator -(XFix64Vector2x4 val)
        {
            return new XFix64Vector2x4(-val.c0, -val.c1, -val.c2, -val.c3);
        }


        /// <summary>Returns the result of a componentwise unary plus operation on a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 operator +(XFix64Vector2x4 val)
        {
            return new XFix64Vector2x4(+val.c0, +val.c1, +val.c2, +val.c3);
        }


        /// <summary>Returns the result of a componentwise equality operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator ==(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3);
        }

        /// <summary>Returns the result of a componentwise equality operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator ==(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new bool2x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs);
        }

        /// <summary>Returns the result of a componentwise equality operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator ==(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3);
        }


        /// <summary>Returns the result of a componentwise not equal operation on two XFix64Vector2x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator !=(XFix64Vector2x4 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3);
        }

        /// <summary>Returns the result of a componentwise not equal operation on a XFix64Vector2x4 matrix and a XFix64 value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator !=(XFix64Vector2x4 lhs, XFix64 rhs)
        {
            return new bool2x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs);
        }

        /// <summary>Returns the result of a componentwise not equal operation on a XFix64 value and a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x4 operator !=(XFix64 lhs, XFix64Vector2x4 rhs)
        {
            return new bool2x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3);
        }



        /// <summary>Returns the XFix64Vector2 element at a specified index.</summary>
        unsafe public ref XFix64Vector2 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 4)
                    throw new System.ArgumentException("index must be between[0...3]");
#endif
                fixed (XFix64Vector2x4* array = &this)
                {
                    return ref ((XFix64Vector2*)array)[index];
                }
            }
        }

        /// <summary>Returns true if the XFix64Vector2x4 is equal to a given XFix64Vector2x4, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(XFix64Vector2x4 rhs)
        {
            return c0.Equals(rhs.c0) && c1.Equals(rhs.c1) && c2.Equals(rhs.c2) && c3.Equals(rhs.c3);
        }

        /// <summary>Returns true if the XFix64Vector2x4 is equal to a given XFix64Vector2x4, false otherwise.</summary>
        public override bool Equals(object o)
        {
            return Equals((XFix64Vector2x4)o);
        }


        /// <summary>Returns a hash code for the XFix64Vector2x4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            return (int)fpmath.hash(this);
        }


        /// <summary>Returns a string representation of the XFix64Vector2x4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("XFix64Vector2x4({0}, {1}, {2}, {3},  {4}, {5}, {6}, {7})", c0.x, c1.x, c2.x, c3.x, c0.y, c1.y, c2.y, c3.y);
        }

        /// <summary>Returns a string representation of the XFix64Vector2x4 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("XFix64Vector2x4({0}, {1}, {2}, {3},  {4}, {5}, {6}, {7})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c2.x.ToString(format, formatProvider), c3.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c2.y.ToString(format, formatProvider), c3.y.ToString(format, formatProvider));
        }

    }

    public static partial class fpmath
    {
        /// <summary>Returns a XFix64Vector2x4 matrix constructed from four XFix64Vector2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(XFix64Vector2 c0, XFix64Vector2 c1, XFix64Vector2 c2, XFix64Vector2 c3)
        {
            return new XFix64Vector2x4(c0, c1, c2, c3);
        }

        /// <summary>Returns a XFix64Vector2x4 matrix constructed from from 8 XFix64 values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(XFix64 m00, XFix64 m01, XFix64 m02, XFix64 m03,
                                  XFix64 m10, XFix64 m11, XFix64 m12, XFix64 m13)
        {
            return new XFix64Vector2x4(m00, m01, m02, m03,
                             m10, m11, m12, m13);
        }

        /// <summary>Returns a XFix64Vector2x4 matrix constructed from a single XFix64 value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(XFix64 v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Returns a XFix64Vector2x4 matrix constructed from a single int value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(int v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Return a XFix64Vector2x4 matrix constructed from a int2x4 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(int2x4 v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Returns a XFix64Vector2x4 matrix constructed from a single uint value by converting it to XFix64 and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(uint v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Return a XFix64Vector2x4 matrix constructed from a uint2x4 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector2x4 XFix64Vector2x4(uint2x4 v)
        {
            return new XFix64Vector2x4(v);
        }

        /// <summary>Return the XFix64Vector4x2 transpose of a XFix64Vector2x4 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static XFix64Vector4x2 transpose(XFix64Vector2x4 v)
        {
            return XFix64Vector4x2(
                v.c0.x, v.c0.y,
                v.c1.x, v.c1.y,
                v.c2.x, v.c2.y,
                v.c3.x, v.c3.y);
        }

        /// <summary>Returns a uint hash code of a XFix64Vector2x4 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(XFix64Vector2x4 v)
        {
            return math.csum(MathXFix64.asuint(v.c0) * uint2(0xA1E92D39u, 0x4583C801u) +
                        MathXFix64.asuint(v.c1) * uint2(0x9536A0F5u, 0xAF816615u) +
                        MathXFix64.asuint(v.c2) * uint2(0x9AF8D62Du, 0xE3600729u) +
                        MathXFix64.asuint(v.c3) * uint2(0x5F17300Du, 0x670D6809u)) + 0x7AF32C49u;
        }

        /// <summary>
        /// Returns a uint2 vector hash code of a XFix64Vector2x4 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint2 hashwide(XFix64Vector2x4 v)
        {
            return (MathXFix64.asuint(v.c0) * uint2(0xAE131389u, 0x5D1B165Bu) +
                    MathXFix64.asuint(v.c1) * uint2(0x87096CD7u, 0x4C7F6DD1u) +
                    MathXFix64.asuint(v.c2) * uint2(0x4822A3E9u, 0xAAC3C25Du) +
                    MathXFix64.asuint(v.c3) * uint2(0xD21D0945u, 0x88FCAB2Du)) + 0x614DA60Du;
        }

    }
}
